#!/usr/bin/env node

const _ = require('lodash')
const chalk = require('chalk')
const clear = require('clear')
const inquirer = require('inquirer')
const program = require('commander')

// Lib
const logger = require('../lib/logger')
const utils = require('../lib/utils')
const greet = require('../lib/greet')
const defaults = require('../lib/defaults')

// tasks
const build = require('../build')

// -----------------------------------------------------
// Help
// -----------------------------------------------------
program.usage('[project-name]')

program.on('--help', function () {
  console.log('  Examples:')
  console.log('')
  console.log(chalk.gray('    # create a custom Swanky Docs project'))
  console.log('    $ swanky init my-project')
  console.log('')
})

program.parse(process.argv)

// -----------------------------------------------------
// Start
// -----------------------------------------------------
function run() {
  clear() // clear the console

  greet()
  logger.head('1. Configuring documentation. âœ“')

  ask((results) => {
    build(results)
  })
}

run()

// -----------------------------------------------------
// Prompts
// -----------------------------------------------------
function ask(callback) {

  const questions = [
    {
      name: 'name',
      type: 'input',
      message: 'Project name:',
      default: program.args[0] || _.kebabCase(utils.getCurrentDirectoryBase())
    },
    {
      type: 'input',
      name: 'src',
      message: 'Documentation SOURCE directory:',
      default: defaults.SOURCE
    },
    {
      type: 'input',
      name: 'output',
      message: 'Documentation OUTPUT directory:',
      default: defaults.OUTPUT
    },
    {
      type: 'input',
      name: 'author',
      message: 'Author:'
    },
    {
      type: 'list',
      name: 'theme',
      message: 'Starter theme:',
      choices: defaults.THEMES,
      default: 'swanky-docs/swanky-theme'
    },
    {
      type: 'checkbox',
      name: 'processors',
      message: 'Processors:',
      choices: defaults.PROCESSORS,
      default: null
    },
    {
      type: 'confirm',
      name: 'demo',
      message: 'Demo pattern library:',
      default: false
    }
  ]

  inquirer.prompt(questions).then(callback)
}
